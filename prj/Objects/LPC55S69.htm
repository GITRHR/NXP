<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\LPC55S69.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\LPC55S69.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 6120001: Last Updated: Thu Jan  9 18:30:22 2020
<BR><P>
<H3>Maximum Stack Usage =        504 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
__rt_entry_main &rArr; main &rArr; BOARD_InitDebugConsole &rArr; DbgConsole_Init &rArr; SerialManager_Init &rArr; Serial_UartInit &rArr; HAL_UartInit &rArr; USART_Init &rArr; USART_SetBaudRate &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertRadixNumToString
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[a9]">POWER_SetVoltageForFreq</a>
 <LI><a href="#[12b]">nio_set_system_voltage</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1]">NMI_Handler</a><BR>
 <LI><a href="#[2]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2]">HardFault_Handler</a><BR>
 <LI><a href="#[3]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">MemManage_Handler</a><BR>
 <LI><a href="#[4]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">BusFault_Handler</a><BR>
 <LI><a href="#[5]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">UsageFault_Handler</a><BR>
 <LI><a href="#[6]">SecureFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">SecureFault_Handler</a><BR>
 <LI><a href="#[7]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">SVC_Handler</a><BR>
 <LI><a href="#[8]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">DebugMon_Handler</a><BR>
 <LI><a href="#[9]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[9]">PendSV_Handler</a><BR>
 <LI><a href="#[61]">ACMP_DriverIRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[61]">ACMP_DriverIRQHandler</a><BR>
 <LI><a href="#[de]">DbgConsole_SendDataReliable</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[d0]">__aeabi_assert</a><BR>
 <LI><a href="#[154]">SerialManager_Write</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[d0]">__aeabi_assert</a><BR>
 <LI><a href="#[153]">Serial_UartWrite</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[d0]">__aeabi_assert</a><BR>
 <LI><a href="#[116]">HAL_UartSendBlocking</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[d0]">__aeabi_assert</a><BR>
 <LI><a href="#[117]">USART_WriteBlocking</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[d0]">__aeabi_assert</a><BR>
 <LI><a href="#[9a]">_sys_exit</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[9a]">_sys_exit</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[61]">ACMP_DriverIRQHandler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(.text)
 <LI><a href="#[23]">ACMP_IRQHandler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(RESET)
 <LI><a href="#[5f]">ADC0_DriverIRQHandler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(.text)
 <LI><a href="#[21]">ADC0_IRQHandler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(RESET)
 <LI><a href="#[4]">BusFault_Handler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(RESET)
 <LI><a href="#[80]">CASER_DriverIRQHandler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(.text)
 <LI><a href="#[42]">CASER_IRQHandler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(RESET)
 <LI><a href="#[53]">CTIMER0_DriverIRQHandler</a> from fsl_ctimer.o(.text.CTIMER0_DriverIRQHandler) referenced from startup_lpc55s69_cm33_core0.o(.text)
 <LI><a href="#[15]">CTIMER0_IRQHandler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(RESET)
 <LI><a href="#[54]">CTIMER1_DriverIRQHandler</a> from fsl_ctimer.o(.text.CTIMER1_DriverIRQHandler) referenced from startup_lpc55s69_cm33_core0.o(.text)
 <LI><a href="#[16]">CTIMER1_IRQHandler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(RESET)
 <LI><a href="#[6d]">CTIMER2_DriverIRQHandler</a> from fsl_ctimer.o(.text.CTIMER2_DriverIRQHandler) referenced from startup_lpc55s69_cm33_core0.o(.text)
 <LI><a href="#[2f]">CTIMER2_IRQHandler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(RESET)
 <LI><a href="#[56]">CTIMER3_DriverIRQHandler</a> from fsl_ctimer.o(.text.CTIMER3_DriverIRQHandler) referenced from startup_lpc55s69_cm33_core0.o(.text)
 <LI><a href="#[18]">CTIMER3_IRQHandler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(RESET)
 <LI><a href="#[6e]">CTIMER4_DriverIRQHandler</a> from fsl_ctimer.o(.text.CTIMER4_DriverIRQHandler) referenced from startup_lpc55s69_cm33_core0.o(.text)
 <LI><a href="#[30]">CTIMER4_IRQHandler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(RESET)
 <LI><a href="#[4a]">DMA0_DriverIRQHandler</a> from fsl_dma.o(.text.DMA0_DriverIRQHandler) referenced from startup_lpc55s69_cm33_core0.o(.text)
 <LI><a href="#[c]">DMA0_IRQHandler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(RESET)
 <LI><a href="#[83]">DMA1_DriverIRQHandler</a> from fsl_dma.o(.text.DMA1_DriverIRQHandler) referenced from startup_lpc55s69_cm33_core0.o(.text)
 <LI><a href="#[45]">DMA1_IRQHandler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(RESET)
 <LI><a href="#[87]">DbgConsole_PrintCallback</a> from fsl_debug_console.o(.text.DbgConsole_PrintCallback) referenced 2 times from fsl_debug_console.o(.text.DbgConsole_Printf)
 <LI><a href="#[8]">DebugMon_Handler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(RESET)
 <LI><a href="#[57]">FLEXCOMM0_DriverIRQHandler</a> from fsl_flexcomm.o(.text.FLEXCOMM0_DriverIRQHandler) referenced from startup_lpc55s69_cm33_core0.o(.text)
 <LI><a href="#[19]">FLEXCOMM0_IRQHandler</a> from main.o(.text.FLEXCOMM0_IRQHandler) referenced from startup_lpc55s69_cm33_core0.o(RESET)
 <LI><a href="#[58]">FLEXCOMM1_DriverIRQHandler</a> from fsl_flexcomm.o(.text.FLEXCOMM1_DriverIRQHandler) referenced from startup_lpc55s69_cm33_core0.o(.text)
 <LI><a href="#[1a]">FLEXCOMM1_IRQHandler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(RESET)
 <LI><a href="#[59]">FLEXCOMM2_DriverIRQHandler</a> from fsl_flexcomm.o(.text.FLEXCOMM2_DriverIRQHandler) referenced from startup_lpc55s69_cm33_core0.o(.text)
 <LI><a href="#[1b]">FLEXCOMM2_IRQHandler</a> from sim800a.o(.text.FLEXCOMM2_IRQHandler) referenced from startup_lpc55s69_cm33_core0.o(RESET)
 <LI><a href="#[5a]">FLEXCOMM3_DriverIRQHandler</a> from fsl_flexcomm.o(.text.FLEXCOMM3_DriverIRQHandler) referenced from startup_lpc55s69_cm33_core0.o(.text)
 <LI><a href="#[1c]">FLEXCOMM3_IRQHandler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(RESET)
 <LI><a href="#[5b]">FLEXCOMM4_DriverIRQHandler</a> from fsl_flexcomm.o(.text.FLEXCOMM4_DriverIRQHandler) referenced from startup_lpc55s69_cm33_core0.o(.text)
 <LI><a href="#[1d]">FLEXCOMM4_IRQHandler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(RESET)
 <LI><a href="#[5c]">FLEXCOMM5_DriverIRQHandler</a> from fsl_flexcomm.o(.text.FLEXCOMM5_DriverIRQHandler) referenced from startup_lpc55s69_cm33_core0.o(.text)
 <LI><a href="#[1e]">FLEXCOMM5_IRQHandler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(RESET)
 <LI><a href="#[5d]">FLEXCOMM6_DriverIRQHandler</a> from fsl_flexcomm.o(.text.FLEXCOMM6_DriverIRQHandler) referenced from startup_lpc55s69_cm33_core0.o(.text)
 <LI><a href="#[1f]">FLEXCOMM6_IRQHandler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(RESET)
 <LI><a href="#[5e]">FLEXCOMM7_DriverIRQHandler</a> from fsl_flexcomm.o(.text.FLEXCOMM7_DriverIRQHandler) referenced from startup_lpc55s69_cm33_core0.o(.text)
 <LI><a href="#[20]">FLEXCOMM7_IRQHandler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(RESET)
 <LI><a href="#[84]">FLEXCOMM8_DriverIRQHandler</a> from fsl_flexcomm.o(.text.FLEXCOMM8_DriverIRQHandler) referenced from startup_lpc55s69_cm33_core0.o(.text)
 <LI><a href="#[46]">FLEXCOMM8_IRQHandler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(RESET)
 <LI><a href="#[4b]">GINT0_DriverIRQHandler</a> from fsl_gint.o(.text.GINT0_DriverIRQHandler) referenced from startup_lpc55s69_cm33_core0.o(.text)
 <LI><a href="#[d]">GINT0_IRQHandler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(RESET)
 <LI><a href="#[4c]">GINT1_DriverIRQHandler</a> from fsl_gint.o(.text.GINT1_DriverIRQHandler) referenced from startup_lpc55s69_cm33_core0.o(.text)
 <LI><a href="#[e]">GINT1_IRQHandler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(RESET)
 <LI><a href="#[7f]">HASHCRYPT_DriverIRQHandler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(.text)
 <LI><a href="#[41]">HASHCRYPT_IRQHandler</a> from fsl_hashcrypt.o(.text.HASHCRYPT_IRQHandler) referenced from startup_lpc55s69_cm33_core0.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(RESET)
 <LI><a href="#[68]">MAILBOX_DriverIRQHandler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(.text)
 <LI><a href="#[2a]">MAILBOX_IRQHandler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(RESET)
 <LI><a href="#[52]">MRT0_DriverIRQHandler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(.text)
 <LI><a href="#[14]">MRT0_IRQHandler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(RESET)
 <LI><a href="#[3]">MemManage_Handler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(RESET)
 <LI><a href="#[6f]">OS_EVENT_DriverIRQHandler</a> from fsl_ostimer.o(.text.OS_EVENT_DriverIRQHandler) referenced from startup_lpc55s69_cm33_core0.o(.text)
 <LI><a href="#[31]">OS_EVENT_IRQHandler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(RESET)
 <LI><a href="#[4d]">PIN_INT0_DriverIRQHandler</a> from fsl_pint.o(.text.PIN_INT0_DriverIRQHandler) referenced from startup_lpc55s69_cm33_core0.o(.text)
 <LI><a href="#[f]">PIN_INT0_IRQHandler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(RESET)
 <LI><a href="#[4e]">PIN_INT1_DriverIRQHandler</a> from fsl_pint.o(.text.PIN_INT1_DriverIRQHandler) referenced from startup_lpc55s69_cm33_core0.o(.text)
 <LI><a href="#[10]">PIN_INT1_IRQHandler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(RESET)
 <LI><a href="#[4f]">PIN_INT2_DriverIRQHandler</a> from fsl_pint.o(.text.PIN_INT2_DriverIRQHandler) referenced from startup_lpc55s69_cm33_core0.o(.text)
 <LI><a href="#[11]">PIN_INT2_IRQHandler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(RESET)
 <LI><a href="#[50]">PIN_INT3_DriverIRQHandler</a> from fsl_pint.o(.text.PIN_INT3_DriverIRQHandler) referenced from startup_lpc55s69_cm33_core0.o(.text)
 <LI><a href="#[12]">PIN_INT3_IRQHandler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(RESET)
 <LI><a href="#[69]">PIN_INT4_DriverIRQHandler</a> from fsl_pint.o(.text.PIN_INT4_DriverIRQHandler) referenced from startup_lpc55s69_cm33_core0.o(.text)
 <LI><a href="#[2b]">PIN_INT4_IRQHandler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(RESET)
 <LI><a href="#[6a]">PIN_INT5_DriverIRQHandler</a> from fsl_pint.o(.text.PIN_INT5_DriverIRQHandler) referenced from startup_lpc55s69_cm33_core0.o(.text)
 <LI><a href="#[2c]">PIN_INT5_IRQHandler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(RESET)
 <LI><a href="#[6b]">PIN_INT6_DriverIRQHandler</a> from fsl_pint.o(.text.PIN_INT6_DriverIRQHandler) referenced from startup_lpc55s69_cm33_core0.o(.text)
 <LI><a href="#[2d]">PIN_INT6_IRQHandler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(RESET)
 <LI><a href="#[6c]">PIN_INT7_DriverIRQHandler</a> from fsl_pint.o(.text.PIN_INT7_DriverIRQHandler) referenced from startup_lpc55s69_cm33_core0.o(.text)
 <LI><a href="#[2e]">PIN_INT7_IRQHandler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(RESET)
 <LI><a href="#[7d]">PLU_DriverIRQHandler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(.text)
 <LI><a href="#[3f]">PLU_IRQHandler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(RESET)
 <LI><a href="#[82]">PQ_DriverIRQHandler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(.text)
 <LI><a href="#[44]">PQ_IRQHandler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(RESET)
 <LI><a href="#[81]">PUF_DriverIRQHandler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(.text)
 <LI><a href="#[43]">PUF_IRQHandler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(RESET)
 <LI><a href="#[9]">PendSV_Handler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(RESET)
 <LI><a href="#[66]">RTC_DriverIRQHandler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(.text)
 <LI><a href="#[28]">RTC_IRQHandler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(RESET)
 <LI><a href="#[60]">Reserved39_DriverIRQHandler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(.text)
 <LI><a href="#[22]">Reserved39_IRQHandler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(RESET)
 <LI><a href="#[62]">Reserved41_DriverIRQHandler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(.text)
 <LI><a href="#[24]">Reserved41_IRQHandler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(RESET)
 <LI><a href="#[63]">Reserved42_DriverIRQHandler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(.text)
 <LI><a href="#[25]">Reserved42_IRQHandler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(RESET)
 <LI><a href="#[67]">Reserved46_DriverIRQHandler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(.text)
 <LI><a href="#[29]">Reserved46_IRQHandler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(RESET)
 <LI><a href="#[70]">Reserved55_DriverIRQHandler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(.text)
 <LI><a href="#[32]">Reserved55_IRQHandler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(RESET)
 <LI><a href="#[71]">Reserved56_DriverIRQHandler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(.text)
 <LI><a href="#[33]">Reserved56_IRQHandler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(RESET)
 <LI><a href="#[72]">Reserved57_DriverIRQHandler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(.text)
 <LI><a href="#[34]">Reserved57_IRQHandler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(RESET)
 <LI><a href="#[74]">Reserved59_DriverIRQHandler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(.text)
 <LI><a href="#[36]">Reserved59_IRQHandler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(RESET)
 <LI><a href="#[75]">Reserved60_DriverIRQHandler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(.text)
 <LI><a href="#[37]">Reserved60_IRQHandler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(RESET)
 <LI><a href="#[76]">Reserved61_DriverIRQHandler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(.text)
 <LI><a href="#[38]">Reserved61_IRQHandler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(RESET)
 <LI><a href="#[55]">SCT0_DriverIRQHandler</a> from fsl_sctimer.o(.text.SCT0_DriverIRQHandler) referenced from startup_lpc55s69_cm33_core0.o(.text)
 <LI><a href="#[17]">SCT0_IRQHandler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(RESET)
 <LI><a href="#[73]">SDIO_DriverIRQHandler</a> from fsl_sdif.o(.text.SDIO_DriverIRQHandler) referenced from startup_lpc55s69_cm33_core0.o(.text)
 <LI><a href="#[35]">SDIO_IRQHandler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(RESET)
 <LI><a href="#[7b]">SEC_GPIO_INT0_IRQ0_DriverIRQHandler</a> from fsl_pint.o(.text.SEC_GPIO_INT0_IRQ0_DriverIRQHandler) referenced from startup_lpc55s69_cm33_core0.o(.text)
 <LI><a href="#[3d]">SEC_GPIO_INT0_IRQ0_IRQHandler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(RESET)
 <LI><a href="#[7c]">SEC_GPIO_INT0_IRQ1_DriverIRQHandler</a> from fsl_pint.o(.text.SEC_GPIO_INT0_IRQ1_DriverIRQHandler) referenced from startup_lpc55s69_cm33_core0.o(.text)
 <LI><a href="#[3e]">SEC_GPIO_INT0_IRQ1_IRQHandler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(RESET)
 <LI><a href="#[7a]">SEC_HYPERVISOR_CALL_DriverIRQHandler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(.text)
 <LI><a href="#[3c]">SEC_HYPERVISOR_CALL_IRQHandler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(RESET)
 <LI><a href="#[7e]">SEC_VIO_DriverIRQHandler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(.text)
 <LI><a href="#[40]">SEC_VIO_IRQHandler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(RESET)
 <LI><a href="#[7]">SVC_Handler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(RESET)
 <LI><a href="#[6]">SecureFault_Handler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(RESET)
 <LI><a href="#[a]">SysTick_Handler</a> from main.o(.text.SysTick_Handler) referenced from startup_lpc55s69_cm33_core0.o(RESET)
 <LI><a href="#[47]">SystemInit</a> from system_lpc55s69_cm33_core0.o(.text.SystemInit) referenced from startup_lpc55s69_cm33_core0.o(.text)
 <LI><a href="#[65]">USB0_DriverIRQHandler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(.text)
 <LI><a href="#[27]">USB0_IRQHandler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(RESET)
 <LI><a href="#[64]">USB0_NEEDCLK_DriverIRQHandler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(.text)
 <LI><a href="#[26]">USB0_NEEDCLK_IRQHandler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(RESET)
 <LI><a href="#[78]">USB1_DriverIRQHandler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(.text)
 <LI><a href="#[3a]">USB1_IRQHandler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(RESET)
 <LI><a href="#[79]">USB1_NEEDCLK_DriverIRQHandler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(.text)
 <LI><a href="#[3b]">USB1_NEEDCLK_IRQHandler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(RESET)
 <LI><a href="#[77]">USB1_UTMI_DriverIRQHandler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(.text)
 <LI><a href="#[39]">USB1_UTMI_IRQHandler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(RESET)
 <LI><a href="#[51]">UTICK0_DriverIRQHandler</a> from fsl_utick.o(.text.UTICK0_DriverIRQHandler) referenced from startup_lpc55s69_cm33_core0.o(.text)
 <LI><a href="#[13]">UTICK0_IRQHandler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(RESET)
 <LI><a href="#[5]">UsageFault_Handler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(RESET)
 <LI><a href="#[49]">WDT_BOD_DriverIRQHandler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(.text)
 <LI><a href="#[b]">WDT_BOD_IRQHandler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(RESET)
 <LI><a href="#[48]">__main</a> from __main.o(!!!main) referenced from startup_lpc55s69_cm33_core0.o(.text)
 <LI><a href="#[86]">_printf_input_char</a> from _printf_char_common.o(.text) referenced from _printf_char_common.o(.text)
 <LI><a href="#[85]">_sputc</a> from _sputc.o(.text) referenced from noretval__2sprintf.o(.text)
 <LI><a href="#[89]">ctimer_match0_callback</a> from main.o(.text.ctimer_match0_callback) referenced from main.o(.data.ctimer_callback_table)
 <LI><a href="#[88]">ctimer_match1_callback</a> from sim800a.o(.text.ctimer_match1_callback) referenced from main.o(.data.ctimer3_callback_table)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[48]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[8a]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[8c]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[173]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[174]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[8d]"></a>__scatterload_copy</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, __scatter_copy.o(!!handler_copy), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>

<P><STRONG><a name="[175]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[8e]"></a>_printf_d</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_d.o(.ARM.Collect$$_printf_percent$$00000009))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = _printf_d &rArr; _printf_int_dec &rArr; _printf_int_common
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[9e]"></a>_printf_percent</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent.o(.ARM.Collect$$_printf_percent$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[176]"></a>_printf_percent_end</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent_end.o(.ARM.Collect$$_printf_percent$$00000017))

<P><STRONG><a name="[93]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[90]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000001))
<BR><BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_init
</UL>

<P><STRONG><a name="[177]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[178]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[179]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[17a]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[17b]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[17c]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[17d]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[17e]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[17f]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[180]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[181]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[182]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[183]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[184]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[185]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[186]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[187]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[188]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[189]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[18a]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[98]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[18b]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[18c]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[18d]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[18e]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[18f]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[190]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[191]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[8b]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[192]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[193]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry7.o(.ARM.Collect$$rtentry$$00000007))

<P><STRONG><a name="[92]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[194]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[94]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 504 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; BOARD_InitDebugConsole &rArr; DbgConsole_Init &rArr; SerialManager_Init &rArr; Serial_UartInit &rArr; HAL_UartInit &rArr; USART_Init &rArr; USART_SetBaudRate &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[195]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[a4]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[97]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[196]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[99]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(RESET)
</UL>
<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>SecureFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecureFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecureFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>WDT_BOD_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>DMA0_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>GINT0_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>GINT1_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>PIN_INT0_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>PIN_INT1_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>PIN_INT2_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>PIN_INT3_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>UTICK0_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>MRT0_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>CTIMER0_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>CTIMER1_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>SCT0_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>CTIMER3_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>FLEXCOMM1_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>FLEXCOMM3_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>FLEXCOMM4_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>FLEXCOMM5_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>FLEXCOMM6_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>FLEXCOMM7_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>ADC0_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>Reserved39_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>ACMP_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>Reserved41_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>Reserved42_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>USB0_NEEDCLK_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>USB0_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>RTC_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>Reserved46_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>MAILBOX_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>PIN_INT4_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>PIN_INT5_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>PIN_INT6_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>PIN_INT7_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>CTIMER2_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>CTIMER4_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>OS_EVENT_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>Reserved55_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>Reserved56_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>Reserved57_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>SDIO_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>Reserved59_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>Reserved60_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>Reserved61_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>USB1_UTMI_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>USB1_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>USB1_NEEDCLK_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>SEC_HYPERVISOR_CALL_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>SEC_GPIO_INT0_IRQ0_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>SEC_GPIO_INT0_IRQ1_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>PLU_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>SEC_VIO_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>CASER_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>PUF_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>PQ_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>DMA1_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>FLEXCOMM8_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>ACMP_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACMP_DriverIRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACMP_DriverIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[5f]"></a>ADC0_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[80]"></a>CASER_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[7f]"></a>HASHCRYPT_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[68]"></a>MAILBOX_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[52]"></a>MRT0_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[7d]"></a>PLU_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[82]"></a>PQ_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[81]"></a>PUF_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[66]"></a>RTC_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[60]"></a>Reserved39_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[62]"></a>Reserved41_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[63]"></a>Reserved42_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[67]"></a>Reserved46_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[70]"></a>Reserved55_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[71]"></a>Reserved56_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[72]"></a>Reserved57_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[74]"></a>Reserved59_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[75]"></a>Reserved60_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[76]"></a>Reserved61_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[7a]"></a>SEC_HYPERVISOR_CALL_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[7e]"></a>SEC_VIO_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[65]"></a>USB0_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[64]"></a>USB0_NEEDCLK_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[78]"></a>USB1_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[79]"></a>USB1_NEEDCLK_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[77]"></a>USB1_UTMI_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[49]"></a>WDT_BOD_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[9b]"></a>__2sprintf</STRONG> (Thumb, 34 bytes, Stack size 32 bytes, noretval__2sprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_event
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Press_2
</UL>

<P><STRONG><a name="[9d]"></a>__printf</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, __printf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>

<P><STRONG><a name="[8f]"></a>_printf_int_dec</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, _printf_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _printf_int_dec &rArr; _printf_int_common
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
</UL>

<P><STRONG><a name="[f3]"></a>strstr</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, strstr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JudgeStr
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Find
</UL>

<P><STRONG><a name="[156]"></a>strlen</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, strlen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StrFormatPrintf
</UL>

<P><STRONG><a name="[a0]"></a>memset</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, memset.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = memset
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Init
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetDefaultConfig
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTIMER_GetDefaultConfig
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialManager_OpenWriteHandle
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialManager_OpenReadHandle
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialManager_Init
</UL>

<P><STRONG><a name="[e0]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Printf
</UL>

<P><STRONG><a name="[197]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[198]"></a>__rt_memclr_w</STRONG> (Thumb, 78 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[a3]"></a>_memset_w</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memclr
</UL>

<P><STRONG><a name="[9f]"></a>_printf_int_common</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, _printf_intcommon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[9c]"></a>_printf_char_common</STRONG> (Thumb, 32 bytes, Stack size 64 bytes, _printf_char_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>

<P><STRONG><a name="[85]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _sputc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> noretval__2sprintf.o(.text)
</UL>
<P><STRONG><a name="[199]"></a>__aeabi_memclr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[a2]"></a>__rt_memclr</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>

<P><STRONG><a name="[a1]"></a>_memset</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
</UL>

<P><STRONG><a name="[96]"></a>exit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[a5]"></a>BOARD_BootClockFROHF96M</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, clock_config.o(.text.BOARD_BootClockFROHF96M))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = BOARD_BootClockFROHF96M &rArr; CLOCK_SetFLASHAccessCyclesForFreq &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_SetVoltageForFreq
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SetupFROClocking
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SetFLASHAccessCyclesForFreq
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SetClkDiv
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_DisablePD
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_AttachClk
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ac]"></a>BOARD_InitDebugConsole</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, board.o(.text.BOARD_InitDebugConsole))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = BOARD_InitDebugConsole &rArr; DbgConsole_Init &rArr; SerialManager_Init &rArr; Serial_UartInit &rArr; HAL_UartInit &rArr; USART_Init &rArr; USART_SetBaudRate &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RESET_ClearPeripheralReset
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Init
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_AttachClk
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[af]"></a>BOARD_InitPins</STRONG> (Thumb, 202 bytes, Stack size 8 bytes, pin_mux.o(.text.BOARD_InitPins))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BOARD_InitPins
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOCON_PinMuxSet
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_EnableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a8]"></a>CLOCK_AttachClk</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, fsl_clock.o(.text.CLOCK_AttachClk))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CLOCK_AttachClk
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_BootClockFROHF96M
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_InitDebugConsole
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b2]"></a>CLOCK_GetAdcClkFreq</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, fsl_clock.o(.text.CLOCK_GetAdcClkFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CLOCK_GetAdcClkFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetPll0OutFreq
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFroHfFreq
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetCoreSysClkFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFreq
</UL>

<P><STRONG><a name="[b6]"></a>CLOCK_GetCTimerClkFreq</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, fsl_clock.o(.text.CLOCK_GetCTimerClkFreq))
<BR><BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetPll0OutFreq
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetOsc32KFreq
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetI2SMClkFreq
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFroHfFreq
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFro1MFreq
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetCoreSysClkFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFreq
</UL>

<P><STRONG><a name="[ba]"></a>CLOCK_GetClockOutClkFreq</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, fsl_clock.o(.text.CLOCK_GetClockOutClkFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CLOCK_GetClockOutClkFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetPll0OutFreq
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetOsc32KFreq
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFroHfFreq
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFro1MFreq
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetExtClkFreq
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetCoreSysClkFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFreq
</UL>

<P><STRONG><a name="[b3]"></a>CLOCK_GetCoreSysClkFreq</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, fsl_clock.o(.text.CLOCK_GetCoreSysClkFreq))
<BR><BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetPll0OutFreq
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetOsc32KFreq
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFroHfFreq
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFro1MFreq
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFro12MFreq
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetExtClkFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFreq
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetUsb0ClkFreq
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetSystickClkFreq
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetSdioClkFreq
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetSctClkFreq
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetHsLspiClkFreq
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFlexCommInputClock
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetClockOutClkFreq
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetCTimerClkFreq
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetAdcClkFreq
</UL>

<P><STRONG><a name="[bb]"></a>CLOCK_GetExtClkFreq</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, fsl_clock.o(.text.CLOCK_GetExtClkFreq))
<BR><BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFreq
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetSctClkFreq
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetCoreSysClkFreq
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetClockOutClkFreq
</UL>

<P><STRONG><a name="[bd]"></a>CLOCK_GetFlexCommClkFreq</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, fsl_clock.o(.text.CLOCK_GetFlexCommClkFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CLOCK_GetFlexCommClkFreq &rArr; CLOCK_GetFlexCommInputClock
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFlexCommInputClock
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFreq
</UL>

<P><STRONG><a name="[be]"></a>CLOCK_GetFlexCommInputClock</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, fsl_clock.o(.text.CLOCK_GetFlexCommInputClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CLOCK_GetFlexCommInputClock
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetPll0OutFreq
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetOsc32KFreq
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetI2SMClkFreq
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFroHfFreq
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFro1MFreq
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFro12MFreq
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetCoreSysClkFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFlexCommClkFreq
</UL>

<P><STRONG><a name="[bf]"></a>CLOCK_GetFreq</STRONG> (Thumb, 230 bytes, Stack size 8 bytes, fsl_clock.o(.text.CLOCK_GetFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CLOCK_GetFreq &rArr; CLOCK_GetSystickClkFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetWdtClkFreq
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetUsb1ClkFreq
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetUsb0ClkFreq
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetSystickClkFreq
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetSdioClkFreq
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetSctClkFreq
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetPll0OutFreq
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetMclkClkFreq
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetI2SMClkFreq
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetHsLspiClkFreq
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFroHfFreq
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFro12MFreq
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFlexCommClkFreq
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetExtClkFreq
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetCoreSysClkFreq
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetClockOutClkFreq
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetCTimerClkFreq
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetAdcClkFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[bc]"></a>CLOCK_GetFro12MFreq</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, fsl_clock.o(.text.CLOCK_GetFro12MFreq))
<BR><BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFreq
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetHsLspiClkFreq
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFlexCommInputClock
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetCoreSysClkFreq
</UL>

<P><STRONG><a name="[b7]"></a>CLOCK_GetFro1MFreq</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, fsl_clock.o(.text.CLOCK_GetFro1MFreq))
<BR><BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetWdtClkFreq
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetSystickClkFreq
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetHsLspiClkFreq
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFlexCommInputClock
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetCoreSysClkFreq
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetClockOutClkFreq
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetCTimerClkFreq
</UL>

<P><STRONG><a name="[b4]"></a>CLOCK_GetFroHfFreq</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, fsl_clock.o(.text.CLOCK_GetFroHfFreq))
<BR><BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFreq
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetUsb0ClkFreq
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetSdioClkFreq
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetSctClkFreq
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetMclkClkFreq
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetHsLspiClkFreq
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFlexCommInputClock
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetCoreSysClkFreq
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetClockOutClkFreq
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetCTimerClkFreq
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetAdcClkFreq
</UL>

<P><STRONG><a name="[c6]"></a>CLOCK_GetHsLspiClkFreq</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, fsl_clock.o(.text.CLOCK_GetHsLspiClkFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CLOCK_GetHsLspiClkFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetPll0OutFreq
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetOsc32KFreq
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFroHfFreq
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFro1MFreq
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFro12MFreq
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetCoreSysClkFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFreq
</UL>

<P><STRONG><a name="[b8]"></a>CLOCK_GetI2SMClkFreq</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, fsl_clock.o(.text.CLOCK_GetI2SMClkFreq))
<BR><BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFreq
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetSctClkFreq
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFlexCommInputClock
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetCTimerClkFreq
</UL>

<P><STRONG><a name="[c2]"></a>CLOCK_GetMclkClkFreq</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, fsl_clock.o(.text.CLOCK_GetMclkClkFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CLOCK_GetMclkClkFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetPll0OutFreq
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFroHfFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFreq
</UL>

<P><STRONG><a name="[b9]"></a>CLOCK_GetOsc32KFreq</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, fsl_clock.o(.text.CLOCK_GetOsc32KFreq))
<BR><BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetSystickClkFreq
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetHsLspiClkFreq
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFlexCommInputClock
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetCoreSysClkFreq
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetClockOutClkFreq
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetCTimerClkFreq
</UL>

<P><STRONG><a name="[b5]"></a>CLOCK_GetPll0OutFreq</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, fsl_clock.o(.text.CLOCK_GetPll0OutFreq))
<BR><BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFreq
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetUsb0ClkFreq
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetSdioClkFreq
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetSctClkFreq
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetMclkClkFreq
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetHsLspiClkFreq
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFlexCommInputClock
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetCoreSysClkFreq
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetClockOutClkFreq
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetCTimerClkFreq
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetAdcClkFreq
</UL>

<P><STRONG><a name="[c3]"></a>CLOCK_GetSctClkFreq</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, fsl_clock.o(.text.CLOCK_GetSctClkFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CLOCK_GetSctClkFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetPll0OutFreq
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetI2SMClkFreq
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFroHfFreq
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetExtClkFreq
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetCoreSysClkFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFreq
</UL>

<P><STRONG><a name="[c4]"></a>CLOCK_GetSdioClkFreq</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, fsl_clock.o(.text.CLOCK_GetSdioClkFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CLOCK_GetSdioClkFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetPll0OutFreq
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFroHfFreq
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetCoreSysClkFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFreq
</UL>

<P><STRONG><a name="[c7]"></a>CLOCK_GetSystickClkFreq</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, fsl_clock.o(.text.CLOCK_GetSystickClkFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CLOCK_GetSystickClkFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetOsc32KFreq
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFro1MFreq
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetCoreSysClkFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFreq
</UL>

<P><STRONG><a name="[c0]"></a>CLOCK_GetUsb0ClkFreq</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, fsl_clock.o(.text.CLOCK_GetUsb0ClkFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CLOCK_GetUsb0ClkFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetPll0OutFreq
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFroHfFreq
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetCoreSysClkFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFreq
</UL>

<P><STRONG><a name="[c1]"></a>CLOCK_GetUsb1ClkFreq</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, fsl_clock.o(.text.CLOCK_GetUsb1ClkFreq))
<BR><BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFreq
</UL>

<P><STRONG><a name="[c5]"></a>CLOCK_GetWdtClkFreq</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, fsl_clock.o(.text.CLOCK_GetWdtClkFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CLOCK_GetWdtClkFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFro1MFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFreq
</UL>

<P><STRONG><a name="[ab]"></a>CLOCK_SetClkDiv</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, fsl_clock.o(.text.CLOCK_SetClkDiv))
<BR><BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_BootClockFROHF96M
</UL>

<P><STRONG><a name="[aa]"></a>CLOCK_SetFLASHAccessCyclesForFreq</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, fsl_clock.o(.text.CLOCK_SetFLASHAccessCyclesForFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = CLOCK_SetFLASHAccessCyclesForFreq &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_BootClockFROHF96M
</UL>

<P><STRONG><a name="[a7]"></a>CLOCK_SetupFROClocking</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, fsl_clock.o(.text.CLOCK_SetupFROClocking))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CLOCK_SetupFROClocking
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_DisablePD
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_BootClockFROHF96M
</UL>

<P><STRONG><a name="[14a]"></a>CLR_Buf2</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, sim800a.o(.text.CLR_Buf2))
<BR><BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wait_CREG
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Second_AT_Command
</UL>

<P><STRONG><a name="[53]"></a>CTIMER0_DriverIRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fsl_ctimer.o(.text.CTIMER0_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CTIMER0_DriverIRQHandler &rArr; CTIMER_GenericIRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTIMER_GenericIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[54]"></a>CTIMER1_DriverIRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fsl_ctimer.o(.text.CTIMER1_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CTIMER1_DriverIRQHandler &rArr; CTIMER_GenericIRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTIMER_GenericIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[6d]"></a>CTIMER2_DriverIRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fsl_ctimer.o(.text.CTIMER2_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CTIMER2_DriverIRQHandler &rArr; CTIMER_GenericIRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTIMER_GenericIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[56]"></a>CTIMER3_DriverIRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fsl_ctimer.o(.text.CTIMER3_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CTIMER3_DriverIRQHandler &rArr; CTIMER_GenericIRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTIMER_GenericIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[6e]"></a>CTIMER4_DriverIRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fsl_ctimer.o(.text.CTIMER4_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CTIMER4_DriverIRQHandler &rArr; CTIMER_GenericIRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTIMER_GenericIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[cc]"></a>CTIMER_GenericIRQHandler</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, fsl_ctimer.o(.text.CTIMER_GenericIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CTIMER_GenericIRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTIMER_GetStatusFlags
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTIMER_ClearStatusFlags
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTIMER4_DriverIRQHandler
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTIMER3_DriverIRQHandler
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTIMER2_DriverIRQHandler
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTIMER1_DriverIRQHandler
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTIMER0_DriverIRQHandler
</UL>

<P><STRONG><a name="[cf]"></a>CTIMER_GetDefaultConfig</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, fsl_ctimer.o(.text.CTIMER_GetDefaultConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = CTIMER_GetDefaultConfig &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d2]"></a>CTIMER_Init</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, fsl_ctimer.o(.text.CTIMER_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = CTIMER_Init &rArr; RESET_PeripheralReset &rArr; RESET_ClearPeripheralReset &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RESET_PeripheralReset
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTIMER_GetInstance
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_EnableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d5]"></a>CTIMER_RegisterCallBack</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, fsl_ctimer.o(.text.CTIMER_RegisterCallBack))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = CTIMER_RegisterCallBack &rArr; CTIMER_GetInstance &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTIMER_GetInstance
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d6]"></a>CTIMER_SetupMatch</STRONG> (Thumb, 146 bytes, Stack size 16 bytes, fsl_ctimer.o(.text.CTIMER_SetupMatch))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = CTIMER_SetupMatch &rArr; CTIMER_GetInstance &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableIRQ
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTIMER_GetInstance
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTIMER_ClearStatusFlags
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[4a]"></a>DMA0_DriverIRQHandler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, fsl_dma.o(.text.DMA0_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = DMA0_DriverIRQHandler &rArr; DMA_IRQHandle &rArr; DMA_GetVirtualStartChannel &rArr; DMA_GetInstance &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_IRQHandle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[83]"></a>DMA1_DriverIRQHandler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, fsl_dma.o(.text.DMA1_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = DMA1_DriverIRQHandler &rArr; DMA_IRQHandle &rArr; DMA_GetVirtualStartChannel &rArr; DMA_GetInstance &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_IRQHandle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[d8]"></a>DMA_IRQHandle</STRONG> (Thumb, 172 bytes, Stack size 32 bytes, fsl_dma.o(.text.DMA_IRQHandle))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = DMA_IRQHandle &rArr; DMA_GetVirtualStartChannel &rArr; DMA_GetInstance &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetVirtualStartChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_DriverIRQHandler
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA0_DriverIRQHandler
</UL>

<P><STRONG><a name="[ae]"></a>DbgConsole_Init</STRONG> (Thumb, 190 bytes, Stack size 40 bytes, fsl_debug_console.o(.text.DbgConsole_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 432 + Unknown Stack Size
<LI>Call Chain = DbgConsole_Init &rArr; SerialManager_Init &rArr; Serial_UartInit &rArr; HAL_UartInit &rArr; USART_Init &rArr; USART_SetBaudRate &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialManager_OpenWriteHandle
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialManager_OpenReadHandle
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialManager_Init
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_InitDebugConsole
</UL>

<P><STRONG><a name="[df]"></a>DbgConsole_Printf</STRONG> (Thumb, 76 bytes, Stack size 160 bytes, fsl_debug_console.o(.text.DbgConsole_Printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StrFormatPrintf
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_SendDataReliable
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>

<P><STRONG><a name="[de]"></a>DbgConsole_SendDataReliable</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, fsl_debug_console.o(.text.DbgConsole_SendDataReliable))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + In Cycle
<LI>Call Chain = DbgConsole_SendDataReliable &rArr;  __aeabi_assert (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialManager_WriteBlocking
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Printf
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_PrintCallback
</UL>

<P><STRONG><a name="[e3]"></a>DisplayButtonUp</STRONG> (Thumb, 130 bytes, Stack size 32 bytes, gui.o(.text.DisplayButtonUp))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = DisplayButtonUp &rArr; Gui_DrawLine &rArr; Gui_DrawPoint &rArr; Lcd_SetXY &rArr; LCD_WriteReg &rArr; Lcd_WriteData_16Bit &rArr; Lcd_WriteData &rArr; SPIv_WriteData
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gui_DrawLine
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[57]"></a>FLEXCOMM0_DriverIRQHandler</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, fsl_flexcomm.o(.text.FLEXCOMM0_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = FLEXCOMM0_DriverIRQHandler &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[19]"></a>FLEXCOMM0_IRQHandler</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, main.o(.text.FLEXCOMM0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FLEXCOMM0_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReadByte
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetStatusFlags
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTIMER_StartTimer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>FLEXCOMM1_DriverIRQHandler</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, fsl_flexcomm.o(.text.FLEXCOMM1_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = FLEXCOMM1_DriverIRQHandler &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[59]"></a>FLEXCOMM2_DriverIRQHandler</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, fsl_flexcomm.o(.text.FLEXCOMM2_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = FLEXCOMM2_DriverIRQHandler &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[1b]"></a>FLEXCOMM2_IRQHandler</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, sim800a.o(.text.FLEXCOMM2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FLEXCOMM2_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReadByte
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetStatusFlags
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>FLEXCOMM3_DriverIRQHandler</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, fsl_flexcomm.o(.text.FLEXCOMM3_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = FLEXCOMM3_DriverIRQHandler &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[5b]"></a>FLEXCOMM4_DriverIRQHandler</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, fsl_flexcomm.o(.text.FLEXCOMM4_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = FLEXCOMM4_DriverIRQHandler &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[5c]"></a>FLEXCOMM5_DriverIRQHandler</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, fsl_flexcomm.o(.text.FLEXCOMM5_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = FLEXCOMM5_DriverIRQHandler &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[5d]"></a>FLEXCOMM6_DriverIRQHandler</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, fsl_flexcomm.o(.text.FLEXCOMM6_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = FLEXCOMM6_DriverIRQHandler &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[5e]"></a>FLEXCOMM7_DriverIRQHandler</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, fsl_flexcomm.o(.text.FLEXCOMM7_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = FLEXCOMM7_DriverIRQHandler &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[84]"></a>FLEXCOMM8_DriverIRQHandler</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, fsl_flexcomm.o(.text.FLEXCOMM8_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = FLEXCOMM8_DriverIRQHandler &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[ed]"></a>FLEXCOMM_GetInstance</STRONG> (Thumb, 84 bytes, Stack size 0 bytes, fsl_flexcomm.o(.text.FLEXCOMM_GetInstance))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = FLEXCOMM_GetInstance &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCOMM_Init
</UL>

<P><STRONG><a name="[ee]"></a>FLEXCOMM_Init</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, fsl_flexcomm.o(.text.FLEXCOMM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = FLEXCOMM_Init &rArr; RESET_PeripheralReset &rArr; RESET_ClearPeripheralReset &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RESET_PeripheralReset
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCOMM_GetInstance
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCOMM_SetPeriph
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_EnableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
</UL>

<P><STRONG><a name="[f2]"></a>Find</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, sim800a.o(.text.Find))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Find &rArr; strstr
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Second_AT_Command
</UL>

<P><STRONG><a name="[4b]"></a>GINT0_DriverIRQHandler</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, fsl_gint.o(.text.GINT0_DriverIRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[4c]"></a>GINT1_DriverIRQHandler</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, fsl_gint.o(.text.GINT1_DriverIRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[106]"></a>GPIO_PinInit</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, fsl_gpio.o(.text.GPIO_PinInit))
<BR><BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GPIO_Init
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GS_i2c_init
</UL>

<P><STRONG><a name="[f4]"></a>GPIO_PortInit</STRONG> (Thumb, 140 bytes, Stack size 8 bytes, fsl_gpio.o(.text.GPIO_PortInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = GPIO_PortInit &rArr; RESET_PeripheralReset &rArr; RESET_ClearPeripheralReset &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RESET_PeripheralReset
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_EnableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[101]"></a>GS_Read_Byte</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, paj7620u2_iic.o(.text.GS_Read_Byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GS_Read_Byte &rArr; GS_IIC_Read_Byte &rArr; GS_IIC_NAck
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GS_IIC_Wait_Ack
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GS_IIC_Stop
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GS_IIC_Start
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GS_IIC_Send_Byte
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GS_IIC_Read_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;paj7620u2_wakeup
</UL>

<P><STRONG><a name="[102]"></a>GS_Read_nByte</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, paj7620u2_iic.o(.text.GS_Read_nByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = GS_Read_nByte &rArr; GS_IIC_Read_Byte &rArr; GS_IIC_NAck
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GS_IIC_Wait_Ack
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GS_IIC_Stop
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GS_IIC_Start
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GS_IIC_Send_Byte
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GS_IIC_Read_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gesture_test
</UL>

<P><STRONG><a name="[103]"></a>GS_WakeUp</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, paj7620u2_iic.o(.text.GS_WakeUp))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GS_WakeUp &rArr; GS_IIC_Send_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GS_IIC_Stop
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GS_IIC_Start
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GS_IIC_Send_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;paj7620u2_wakeup
</UL>

<P><STRONG><a name="[104]"></a>GS_Write_Byte</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, paj7620u2_iic.o(.text.GS_Write_Byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GS_Write_Byte &rArr; GS_IIC_Wait_Ack &rArr; GS_IIC_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GS_IIC_Wait_Ack
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GS_IIC_Stop
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GS_IIC_Start
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GS_IIC_Send_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;paj7620u2_init
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gesture_init
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;paj7620u2_selectBank
</UL>

<P><STRONG><a name="[105]"></a>GS_i2c_init</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, paj7620u2_iic.o(.text.GS_i2c_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GS_i2c_init
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinInit
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;paj7620u2_init
</UL>

<P><STRONG><a name="[107]"></a>GUI</STRONG> (Thumb, 264 bytes, Stack size 24 bytes, main.o(.text.GUI))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = GUI &rArr; Gui_DrawFont_GBK16 &rArr; Gui_DrawPoint &rArr; Lcd_SetXY &rArr; LCD_WriteReg &rArr; Lcd_WriteData_16Bit &rArr; Lcd_WriteData &rArr; SPIv_WriteData
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Clear
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gui_DrawFont_GBK16
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[10a]"></a>GUI_INIT</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, main.o(.text.GUI_INIT))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = GUI_INIT &rArr; Gui_DrawFont_GBK16 &rArr; Gui_DrawPoint &rArr; Lcd_SetXY &rArr; LCD_WriteReg &rArr; Lcd_WriteData_16Bit &rArr; Lcd_WriteData &rArr; SPIv_WriteData
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gui_DrawFont_GBK16
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[10b]"></a>Gesture_init</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, paj7620u2.o(.text.Gesture_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Gesture_init &rArr; paj7620u2_selectBank &rArr; GS_Write_Byte &rArr; GS_IIC_Wait_Ack &rArr; GS_IIC_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;paj7620u2_selectBank
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GS_Write_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[10d]"></a>Gesture_test</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, paj7620u2.o(.text.Gesture_test))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Gesture_test &rArr; GS_Read_nByte &rArr; GS_IIC_Read_Byte &rArr; GS_IIC_NAck
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GS_Read_nByte
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;paj7620u2_sensor_test
</UL>

<P><STRONG><a name="[109]"></a>Gui_DrawFont_GBK16</STRONG> (Thumb, 422 bytes, Stack size 64 bytes, gui.o(.text.Gui_DrawFont_GBK16))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = Gui_DrawFont_GBK16 &rArr; Gui_DrawPoint &rArr; Lcd_SetXY &rArr; LCD_WriteReg &rArr; Lcd_WriteData_16Bit &rArr; Lcd_WriteData &rArr; SPIv_WriteData
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gui_DrawPoint
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;press_FR
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;judge
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_event
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowErrMessage
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Press_2
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_INIT
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wait_CREG
</UL>

<P><STRONG><a name="[10f]"></a>Gui_DrawFont_Num32</STRONG> (Thumb, 150 bytes, Stack size 56 bytes, gui.o(.text.Gui_DrawFont_Num32))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = Gui_DrawFont_Num32 &rArr; Gui_DrawPoint &rArr; Lcd_SetXY &rArr; LCD_WriteReg &rArr; Lcd_WriteData_16Bit &rArr; Lcd_WriteData &rArr; SPIv_WriteData
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gui_DrawPoint
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_event
</UL>

<P><STRONG><a name="[e4]"></a>Gui_DrawLine</STRONG> (Thumb, 190 bytes, Stack size 48 bytes, gui.o(.text.Gui_DrawLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = Gui_DrawLine &rArr; Gui_DrawPoint &rArr; Lcd_SetXY &rArr; LCD_WriteReg &rArr; Lcd_WriteData_16Bit &rArr; Lcd_WriteData &rArr; SPIv_WriteData
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_SetXY
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gui_DrawPoint
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayButtonUp
</UL>

<P><STRONG><a name="[10e]"></a>Gui_DrawPoint</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lcd_driver.o(.text.Gui_DrawPoint))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Gui_DrawPoint &rArr; Lcd_SetXY &rArr; LCD_WriteReg &rArr; Lcd_WriteData_16Bit &rArr; Lcd_WriteData &rArr; SPIv_WriteData
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_WriteData_16Bit
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_SetXY
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gui_DrawFont_Num32
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gui_DrawFont_GBK16
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gui_DrawLine
</UL>

<P><STRONG><a name="[112]"></a>HAL_UartInit</STRONG> (Thumb, 208 bytes, Stack size 32 bytes, usart_adapter.o(.text.HAL_UartInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + Unknown Stack Size
<LI>Call Chain = HAL_UartInit &rArr; USART_Init &rArr; USART_SetBaudRate &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetDefaultConfig
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UartGetStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serial_UartInit
</UL>

<P><STRONG><a name="[116]"></a>HAL_UartSendBlocking</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, usart_adapter.o(.text.HAL_UartSendBlocking))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + In Cycle
<LI>Call Chain = HAL_UartSendBlocking &rArr;  __aeabi_assert (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_WriteBlocking
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serial_UartWrite
</UL>

<P><STRONG><a name="[41]"></a>HASHCRYPT_IRQHandler</STRONG> (Thumb, 86 bytes, Stack size 0 bytes, fsl_hashcrypt.o(.text.HASHCRYPT_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(RESET)
</UL>
<P><STRONG><a name="[11a]"></a>LCD_GPIO_Init</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, lcd_driver.o(.text.LCD_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LCD_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinInit
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[11b]"></a>LCD_WriteReg</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lcd_driver.o(.text.LCD_WriteReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = LCD_WriteReg &rArr; Lcd_WriteData_16Bit &rArr; Lcd_WriteData &rArr; SPIv_WriteData
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_WriteIndex
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_WriteData_16Bit
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Init
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_SetRegion
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_SetXY
</UL>

<P><STRONG><a name="[108]"></a>Lcd_Clear</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, lcd_driver.o(.text.Lcd_Clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Lcd_Clear &rArr; Lcd_SetRegion &rArr; LCD_WriteReg &rArr; Lcd_WriteData_16Bit &rArr; Lcd_WriteData &rArr; SPIv_WriteData
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIv_WriteData
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_SetRegion
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PortSet
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PortClear
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;judge
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI
</UL>

<P><STRONG><a name="[121]"></a>Lcd_Init</STRONG> (Thumb, 492 bytes, Stack size 8 bytes, lcd_driver.o(.text.Lcd_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Lcd_Init &rArr; LCD_WriteReg &rArr; Lcd_WriteData_16Bit &rArr; Lcd_WriteData &rArr; SPIv_WriteData
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_WriteIndex
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_WriteData_16Bit
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Reset
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[122]"></a>Lcd_Reset</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, lcd_driver.o(.text.Lcd_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Lcd_Reset
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PortSet
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PortClear
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Init
</UL>

<P><STRONG><a name="[11d]"></a>Lcd_SetRegion</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, lcd_driver.o(.text.Lcd_SetRegion))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Lcd_SetRegion &rArr; LCD_WriteReg &rArr; Lcd_WriteData_16Bit &rArr; Lcd_WriteData &rArr; SPIv_WriteData
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_WriteIndex
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Clear
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showimage
</UL>

<P><STRONG><a name="[110]"></a>Lcd_SetXY</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, lcd_driver.o(.text.Lcd_SetXY))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Lcd_SetXY &rArr; LCD_WriteReg &rArr; Lcd_WriteData_16Bit &rArr; Lcd_WriteData &rArr; SPIv_WriteData
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_WriteIndex
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gui_DrawPoint
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gui_DrawLine
</UL>

<P><STRONG><a name="[123]"></a>Lcd_WriteData</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, lcd_driver.o(.text.Lcd_WriteData))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Lcd_WriteData &rArr; SPIv_WriteData
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIv_WriteData
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PortSet
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PortClear
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_WriteData_16Bit
</UL>

<P><STRONG><a name="[111]"></a>Lcd_WriteData_16Bit</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, lcd_driver.o(.text.Lcd_WriteData_16Bit))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Lcd_WriteData_16Bit &rArr; Lcd_WriteData &rArr; SPIv_WriteData
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_WriteData
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Init
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showimage
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteReg
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gui_DrawPoint
</UL>

<P><STRONG><a name="[11c]"></a>Lcd_WriteIndex</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, lcd_driver.o(.text.Lcd_WriteIndex))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Lcd_WriteIndex &rArr; SPIv_WriteData
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIv_WriteData
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PortSet
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PortClear
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Init
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_SetRegion
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteReg
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_SetXY
</UL>

<P><STRONG><a name="[128]"></a>OSTIMER_ClearStatusFlags</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fsl_ostimer.o(.text.OSTIMER_ClearStatusFlags))
<BR><BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTIMER_HandleIRQ
</UL>

<P><STRONG><a name="[127]"></a>OSTIMER_HandleIRQ</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, fsl_ostimer.o(.text.OSTIMER_HandleIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OSTIMER_HandleIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTIMER_ClearStatusFlags
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EVENT_DriverIRQHandler
</UL>

<P><STRONG><a name="[6f]"></a>OS_EVENT_DriverIRQHandler</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, fsl_ostimer.o(.text.OS_EVENT_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OS_EVENT_DriverIRQHandler &rArr; OSTIMER_HandleIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTIMER_HandleIRQ
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[129]"></a>PINT_PatternMatchResetDetectLogic</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, fsl_pint.o(.text.PINT_PatternMatchResetDetectLogic))
<BR><BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEC_GPIO_INT0_IRQ1_DriverIRQHandler
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEC_GPIO_INT0_IRQ0_DriverIRQHandler
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIN_INT7_DriverIRQHandler
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIN_INT6_DriverIRQHandler
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIN_INT5_DriverIRQHandler
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIN_INT4_DriverIRQHandler
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIN_INT3_DriverIRQHandler
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIN_INT2_DriverIRQHandler
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIN_INT1_DriverIRQHandler
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIN_INT0_DriverIRQHandler
</UL>

<P><STRONG><a name="[12a]"></a>PINT_PinInterruptClrStatus</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, fsl_pint.o(.text.PINT_PinInterruptClrStatus))
<BR><BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEC_GPIO_INT0_IRQ1_DriverIRQHandler
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEC_GPIO_INT0_IRQ0_DriverIRQHandler
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIN_INT7_DriverIRQHandler
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIN_INT6_DriverIRQHandler
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIN_INT5_DriverIRQHandler
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIN_INT4_DriverIRQHandler
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIN_INT3_DriverIRQHandler
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIN_INT2_DriverIRQHandler
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIN_INT1_DriverIRQHandler
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIN_INT0_DriverIRQHandler
</UL>

<P><STRONG><a name="[4d]"></a>PIN_INT0_DriverIRQHandler</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, fsl_pint.o(.text.PIN_INT0_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PIN_INT0_DriverIRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINT_PatternMatchResetDetectLogic
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINT_PinInterruptClrStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[4e]"></a>PIN_INT1_DriverIRQHandler</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, fsl_pint.o(.text.PIN_INT1_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PIN_INT1_DriverIRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINT_PatternMatchResetDetectLogic
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINT_PinInterruptClrStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[4f]"></a>PIN_INT2_DriverIRQHandler</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, fsl_pint.o(.text.PIN_INT2_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PIN_INT2_DriverIRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINT_PatternMatchResetDetectLogic
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINT_PinInterruptClrStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[50]"></a>PIN_INT3_DriverIRQHandler</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, fsl_pint.o(.text.PIN_INT3_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PIN_INT3_DriverIRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINT_PatternMatchResetDetectLogic
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINT_PinInterruptClrStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[69]"></a>PIN_INT4_DriverIRQHandler</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, fsl_pint.o(.text.PIN_INT4_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PIN_INT4_DriverIRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINT_PatternMatchResetDetectLogic
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINT_PinInterruptClrStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[6a]"></a>PIN_INT5_DriverIRQHandler</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, fsl_pint.o(.text.PIN_INT5_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PIN_INT5_DriverIRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINT_PatternMatchResetDetectLogic
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINT_PinInterruptClrStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[6b]"></a>PIN_INT6_DriverIRQHandler</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, fsl_pint.o(.text.PIN_INT6_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PIN_INT6_DriverIRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINT_PatternMatchResetDetectLogic
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINT_PinInterruptClrStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[6c]"></a>PIN_INT7_DriverIRQHandler</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, fsl_pint.o(.text.PIN_INT7_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PIN_INT7_DriverIRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINT_PatternMatchResetDetectLogic
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINT_PinInterruptClrStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[a9]"></a>POWER_SetVoltageForFreq</STRONG> (Thumb, 40 bytes, Stack size unknown bytes, fsl_power_lib.o(.text.POWER_SetVoltageForFreq))
<BR><BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nio_set_system_voltage
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_BootClockFROHF96M
</UL>

<P><STRONG><a name="[12c]"></a>PS_GenChar</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, as608.o(.text.PS_GenChar))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = PS_GenChar &rArr; JudgeStr &rArr; strstr
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sendcmd
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendLength
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendHead
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendFlag
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCheck
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendAddr
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MYUSART_SendData
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JudgeStr
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;press_FR
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Press_2
</UL>

<P><STRONG><a name="[133]"></a>PS_GetImage</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, as608.o(.text.PS_GetImage))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = PS_GetImage &rArr; JudgeStr &rArr; strstr
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sendcmd
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendLength
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendHead
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendFlag
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCheck
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendAddr
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JudgeStr
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;press_FR
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Press_2
</UL>

<P><STRONG><a name="[134]"></a>PS_HandShake</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, as608.o(.text.PS_HandShake))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = PS_HandShake &rArr; SendHead &rArr; MYUSART_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendHead
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendAddr
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MYUSART_SendData
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[135]"></a>PS_HighSpeedSearch</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, as608.o(.text.PS_HighSpeedSearch))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = PS_HighSpeedSearch &rArr; JudgeStr &rArr; strstr
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sendcmd
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendLength
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendHead
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendFlag
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCheck
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendAddr
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MYUSART_SendData
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JudgeStr
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;press_FR
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Press_2
</UL>

<P><STRONG><a name="[136]"></a>Press_2</STRONG> (Thumb, 172 bytes, Stack size 40 bytes, main.o(.text.Press_2))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = Press_2 &rArr; ShowErrMessage &rArr; Gui_DrawFont_GBK16 &rArr; Gui_DrawPoint &rArr; Lcd_SetXY &rArr; LCD_WriteReg &rArr; Lcd_WriteData_16Bit &rArr; Lcd_WriteData &rArr; SPIv_WriteData
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowErrMessage
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PS_HighSpeedSearch
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PS_GetImage
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PS_GenChar
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gui_DrawFont_GBK16
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_event
</UL>

<P><STRONG><a name="[138]"></a>QDTFT_Test_Demo</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, qdtft_demo.o(.text.QDTFT_Test_Demo))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = QDTFT_Test_Demo &rArr; showimage &rArr; Lcd_SetRegion &rArr; LCD_WriteReg &rArr; Lcd_WriteData_16Bit &rArr; Lcd_WriteData &rArr; SPIv_WriteData
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showimage
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_event
</UL>

<P><STRONG><a name="[ad]"></a>RESET_ClearPeripheralReset</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, fsl_reset.o(.text.RESET_ClearPeripheralReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = RESET_ClearPeripheralReset &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_InitDebugConsole
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RESET_PeripheralReset
</UL>

<P><STRONG><a name="[d4]"></a>RESET_PeripheralReset</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, fsl_reset.o(.text.RESET_PeripheralReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = RESET_PeripheralReset &rArr; RESET_ClearPeripheralReset &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RESET_ClearPeripheralReset
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RESET_SetPeripheralReset
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PortInit
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTIMER_Init
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCOMM_Init
</UL>

<P><STRONG><a name="[13a]"></a>RESET_SetPeripheralReset</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, fsl_reset.o(.text.RESET_SetPeripheralReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = RESET_SetPeripheralReset &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RESET_PeripheralReset
</UL>

<P><STRONG><a name="[55]"></a>SCT0_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fsl_sctimer.o(.text.SCT0_DriverIRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[19a]"></a>SCTIMER_EventHandleIRQ</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, fsl_sctimer.o(.text.SCTIMER_EventHandleIRQ), UNUSED)

<P><STRONG><a name="[73]"></a>SDIO_DriverIRQHandler</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, fsl_sdif.o(.text.SDIO_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = SDIO_DriverIRQHandler &rArr; SDIF_TransferHandleIRQ &rArr; SDIF_TransferHandleData &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIF_TransferHandleIRQ
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[7b]"></a>SEC_GPIO_INT0_IRQ0_DriverIRQHandler</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, fsl_pint.o(.text.SEC_GPIO_INT0_IRQ0_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SEC_GPIO_INT0_IRQ0_DriverIRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINT_PatternMatchResetDetectLogic
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINT_PinInterruptClrStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[7c]"></a>SEC_GPIO_INT0_IRQ1_DriverIRQHandler</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, fsl_pint.o(.text.SEC_GPIO_INT0_IRQ1_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SEC_GPIO_INT0_IRQ1_DriverIRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINT_PatternMatchResetDetectLogic
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINT_PinInterruptClrStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[120]"></a>SPIv_WriteData</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, lcd_driver.o(.text.SPIv_WriteData))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SPIv_WriteData
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PortSet
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PortClear
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Clear
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_WriteIndex
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_WriteData
</UL>

<P><STRONG><a name="[149]"></a>Second_AT_Command</STRONG> (Thumb, 146 bytes, Stack size 40 bytes, sim800a.o(.text.Second_AT_Command))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = Second_AT_Command &rArr; Find &rArr; strstr
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_SendString
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Find
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLR_Buf2
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_WriteByte
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetStatusFlags
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Pdu_Mode
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Pdu_Sms
</UL>

<P><STRONG><a name="[14d]"></a>Send_Chinese_Message</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, sim800a.o(.text.Send_Chinese_Message))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = Send_Chinese_Message &rArr; Wait_CREG &rArr; Gui_DrawFont_GBK16 &rArr; Gui_DrawPoint &rArr; Lcd_SetXY &rArr; LCD_WriteReg &rArr; Lcd_WriteData_16Bit &rArr; Lcd_WriteData &rArr; SPIv_WriteData
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wait_CREG
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Pdu_Mode
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Pdu_Sms
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_event
</UL>

<P><STRONG><a name="[150]"></a>Send_Pdu_Sms</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, sim800a.o(.text.Send_Pdu_Sms))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = Send_Pdu_Sms &rArr; Second_AT_Command &rArr; Find &rArr; strstr
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_SendString
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Second_AT_Command
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_WriteByte
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetStatusFlags
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Chinese_Message
</UL>

<P><STRONG><a name="[db]"></a>SerialManager_Init</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, serial_manager.o(.text.SerialManager_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 392 + Unknown Stack Size
<LI>Call Chain = SerialManager_Init &rArr; Serial_UartInit &rArr; HAL_UartInit &rArr; USART_Init &rArr; USART_SetBaudRate &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serial_UartInit
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Init
</UL>

<P><STRONG><a name="[dd]"></a>SerialManager_OpenReadHandle</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, serial_manager.o(.text.SerialManager_OpenReadHandle))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = SerialManager_OpenReadHandle &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Init
</UL>

<P><STRONG><a name="[dc]"></a>SerialManager_OpenWriteHandle</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, serial_manager.o(.text.SerialManager_OpenWriteHandle))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = SerialManager_OpenWriteHandle &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Init
</UL>

<P><STRONG><a name="[e2]"></a>SerialManager_WriteBlocking</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, serial_manager.o(.text.SerialManager_WriteBlocking))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SerialManager_WriteBlocking &rArr; SerialManager_Write &rArr;  __aeabi_assert (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialManager_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_SendDataReliable
</UL>

<P><STRONG><a name="[151]"></a>Serial_UartInit</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, serial_port_uart.o(.text.Serial_UartInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 376 + Unknown Stack Size
<LI>Call Chain = Serial_UartInit &rArr; HAL_UartInit &rArr; USART_Init &rArr; USART_SetBaudRate &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UartInit
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialManager_Init
</UL>

<P><STRONG><a name="[153]"></a>Serial_UartWrite</STRONG> (Thumb, 84 bytes, Stack size 0 bytes, serial_port_uart.o(.text.Serial_UartWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + In Cycle
<LI>Call Chain = Serial_UartWrite &rArr;  __aeabi_assert (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UartSendBlocking
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialManager_StartWriting
</UL>

<P><STRONG><a name="[14f]"></a>Set_Pdu_Mode</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, sim800a.o(.text.Set_Pdu_Mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = Set_Pdu_Mode &rArr; Second_AT_Command &rArr; Find &rArr; strstr
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Second_AT_Command
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Chinese_Message
</UL>

<P><STRONG><a name="[137]"></a>ShowErrMessage</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, main.o(.text.ShowErrMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = ShowErrMessage &rArr; Gui_DrawFont_GBK16 &rArr; Gui_DrawPoint &rArr; Lcd_SetXY &rArr; LCD_WriteReg &rArr; Lcd_WriteData_16Bit &rArr; Lcd_WriteData &rArr; SPIv_WriteData
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gui_DrawFont_GBK16
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;press_FR
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Press_2
</UL>

<P><STRONG><a name="[e1]"></a>StrFormatPrintf</STRONG> (Thumb, 562 bytes, Stack size 96 bytes, fsl_str.o(.text.StrFormatPrintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = StrFormatPrintf &rArr; ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConvertRadixNumToString
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Printf
</UL>

<P><STRONG><a name="[a]"></a>SysTick_Handler</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, main.o(.text.SysTick_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>SystemInit</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, system_lpc55s69_cm33_core0.o(.text.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[19b]"></a>SystemInitHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system_lpc55s69_cm33_core0.o(.text.SystemInitHook), UNUSED)

<P><STRONG><a name="[14c]"></a>UART2_SendString</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, sim800a.o(.text.UART2_SendString))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART2_SendString
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_WriteByte
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetStatusFlags
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wait_CREG
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Pdu_Sms
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Second_AT_Command
</UL>

<P><STRONG><a name="[157]"></a>UART_IO_INIT</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, main.o(.text.UART_IO_INIT))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_IO_INIT
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOCON_PinMuxSet
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_EnableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[113]"></a>USART_GetDefaultConfig</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, fsl_usart.o(.text.USART_GetDefaultConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = USART_GetDefaultConfig &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UartInit
</UL>

<P><STRONG><a name="[114]"></a>USART_Init</STRONG> (Thumb, 316 bytes, Stack size 16 bytes, fsl_usart.o(.text.USART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = USART_Init &rArr; USART_SetBaudRate &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCOMM_Init
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SetBaudRate
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_EnableContinuousSCLK
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UartInit
</UL>

<P><STRONG><a name="[15a]"></a>USART_SetBaudRate</STRONG> (Thumb, 224 bytes, Stack size 32 bytes, fsl_usart.o(.text.USART_SetBaudRate))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = USART_SetBaudRate &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
</UL>

<P><STRONG><a name="[117]"></a>USART_WriteBlocking</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, fsl_usart.o(.text.USART_WriteBlocking))
<BR><BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UartSendBlocking
</UL>

<P><STRONG><a name="[51]"></a>UTICK0_DriverIRQHandler</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, fsl_utick.o(.text.UTICK0_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UTICK0_DriverIRQHandler &rArr; UTICK_HandleIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTICK_HandleIRQ
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[15d]"></a>UTICK_ClearStatusFlags</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fsl_utick.o(.text.UTICK_ClearStatusFlags))
<BR><BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTICK_HandleIRQ
</UL>

<P><STRONG><a name="[15c]"></a>UTICK_HandleIRQ</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, fsl_utick.o(.text.UTICK_HandleIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UTICK_HandleIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTICK_ClearStatusFlags
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTICK0_DriverIRQHandler
</UL>

<P><STRONG><a name="[14e]"></a>Wait_CREG</STRONG> (Thumb, 160 bytes, Stack size 24 bytes, sim800a.o(.text.Wait_CREG))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = Wait_CREG &rArr; Gui_DrawFont_GBK16 &rArr; Gui_DrawPoint &rArr; Lcd_SetXY &rArr; LCD_WriteReg &rArr; Lcd_WriteData_16Bit &rArr; Lcd_WriteData &rArr; SPIv_WriteData
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gui_DrawFont_GBK16
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_SendString
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLR_Buf2
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Chinese_Message
</UL>

<P><STRONG><a name="[d0]"></a>__aeabi_assert</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, fsl_assert.o(.text.__aeabi_assert))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Printf
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RESET_ClearPeripheralReset
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Init
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetDefaultConfig
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PortInit
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTIMER_Init
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTIMER_GetDefaultConfig
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RESET_SetPeripheralReset
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTIMER_GetInstance
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCOMM_GetInstance
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCOMM8_DriverIRQHandler
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCOMM7_DriverIRQHandler
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCOMM6_DriverIRQHandler
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCOMM5_DriverIRQHandler
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCOMM4_DriverIRQHandler
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCOMM3_DriverIRQHandler
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCOMM2_DriverIRQHandler
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCOMM1_DriverIRQHandler
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCOMM0_DriverIRQHandler
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetInstance
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_DriverIRQHandler
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIF_TransferHandleIRQ
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIF_TransferHandleData
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIF_TransferHandleCommand
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_WriteBlocking
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SetBaudRate
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UartSendBlocking
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UartInit
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serial_UartWrite
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serial_UartInit
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialManager_Write
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialManager_OpenWriteHandle
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialManager_OpenReadHandle
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialManager_Init
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_SendDataReliable
</UL>

<P><STRONG><a name="[9a]"></a>_sys_exit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, fsl_debug_console.o(.text._sys_exit))
<BR><BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[89]"></a>ctimer_match0_callback</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, main.o(.text.ctimer_match0_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ctimer_match0_callback
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTIMER_StopTimer
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTIMER_ClearStatusFlags
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.data.ctimer_callback_table)
</UL>
<P><STRONG><a name="[88]"></a>ctimer_match1_callback</STRONG> (Thumb, 144 bytes, Stack size 8 bytes, sim800a.o(.text.ctimer_match1_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ctimer_match1_callback
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PortToggle
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTIMER_ClearStatusFlags
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.data.ctimer3_callback_table)
</UL>
<P><STRONG><a name="[162]"></a>delay_init</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, main.o(.text.delay_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = delay_init
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[119]"></a>delay_ms</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, main.o(.text.delay_ms))
<BR><BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;press_FR
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;judge
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_event
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QDTFT_Test_Demo
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Press_2
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PS_HandShake
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Init
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;paj7620u2_wakeup
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JudgeStr
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Reset
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wait_CREG
</UL>

<P><STRONG><a name="[f9]"></a>delay_us</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, main.o(.text.delay_us))
<BR><BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GS_IIC_Wait_Ack
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GS_IIC_Stop
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GS_IIC_Start
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GS_IIC_Send_Byte
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GS_IIC_Read_Byte
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GS_IIC_NAck
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GS_IIC_Ack
</UL>

<P><STRONG><a name="[164]"></a>handle_event</STRONG> (Thumb, 572 bytes, Stack size 40 bytes, main.o(.text.handle_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = handle_event &rArr; Press_2 &rArr; ShowErrMessage &rArr; Gui_DrawFont_GBK16 &rArr; Gui_DrawPoint &rArr; Lcd_SetXY &rArr; LCD_WriteReg &rArr; Lcd_WriteData_16Bit &rArr; Lcd_WriteData &rArr; SPIv_WriteData
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Chinese_Message
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QDTFT_Test_Demo
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Press_2
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gui_DrawFont_Num32
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gui_DrawFont_GBK16
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinRead
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[166]"></a>judge</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, main.o(.text.judge))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = judge &rArr; Gui_DrawFont_GBK16 &rArr; Gui_DrawPoint &rArr; Lcd_SetXY &rArr; LCD_WriteReg &rArr; Lcd_WriteData_16Bit &rArr; Lcd_WriteData &rArr; SPIv_WriteData
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Clear
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gui_DrawFont_GBK16
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;press_FR
</UL>

<P><STRONG><a name="[95]"></a>main</STRONG> (Thumb, 968 bytes, Stack size 64 bytes, main.o(.text.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 504 + Unknown Stack Size
<LI>Call Chain = main &rArr; BOARD_InitDebugConsole &rArr; DbgConsole_Init &rArr; SerialManager_Init &rArr; Serial_UartInit &rArr; HAL_UartInit &rArr; USART_Init &rArr; USART_SetBaudRate &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_BootClockFROHF96M
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_AttachClk
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_InitDebugConsole
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_InitPins
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;press_FR
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;paj7620u2_sensor_test
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;paj7620u2_init
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_event
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_init
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetDefaultConfig
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_IO_INIT
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PS_HandShake
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Init
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Clear
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GPIO_Init
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gui_DrawFont_GBK16
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gesture_init
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_INIT
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PortInit
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinInit
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayButtonUp
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTIMER_SetupMatch
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTIMER_RegisterCallBack
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTIMER_Init
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTIMER_GetDefaultConfig
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFreq
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_EnableInterrupts
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinRead
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableIRQ
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTIMER_StartTimer
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_EnableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[12b]"></a>nio_set_system_voltage</STRONG> (Thumb, 232 bytes, Stack size unknown bytes, fsl_power_lib.o(.text.nio_set_system_voltage))
<BR><BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_SetVoltageForFreq
</UL>

<P><STRONG><a name="[168]"></a>paj7620u2_init</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, paj7620u2.o(.text.paj7620u2_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = paj7620u2_init &rArr; paj7620u2_wakeup &rArr; paj7620u2_selectBank &rArr; GS_Write_Byte &rArr; GS_IIC_Wait_Ack &rArr; GS_IIC_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;paj7620u2_wakeup
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;paj7620u2_selectBank
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GS_i2c_init
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GS_Write_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[10c]"></a>paj7620u2_selectBank</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, paj7620u2.o(.text.paj7620u2_selectBank))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = paj7620u2_selectBank &rArr; GS_Write_Byte &rArr; GS_IIC_Wait_Ack &rArr; GS_IIC_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GS_Write_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;paj7620u2_init
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gesture_init
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;paj7620u2_wakeup
</UL>

<P><STRONG><a name="[16a]"></a>paj7620u2_sensor_test</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, paj7620u2.o(.text.paj7620u2_sensor_test))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = paj7620u2_sensor_test &rArr; Gesture_test &rArr; GS_Read_nByte &rArr; GS_IIC_Read_Byte &rArr; GS_IIC_NAck
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gesture_test
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[16b]"></a>paj7620u2_wakeup</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, paj7620u2.o(.text.paj7620u2_wakeup))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = paj7620u2_wakeup &rArr; paj7620u2_selectBank &rArr; GS_Write_Byte &rArr; GS_IIC_Wait_Ack &rArr; GS_IIC_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;paj7620u2_selectBank
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GS_WakeUp
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GS_Read_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;paj7620u2_init
</UL>

<P><STRONG><a name="[169]"></a>press_FR</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, main.o(.text.press_FR))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = press_FR &rArr; judge &rArr; Gui_DrawFont_GBK16 &rArr; Gui_DrawPoint &rArr; Lcd_SetXY &rArr; LCD_WriteReg &rArr; Lcd_WriteData_16Bit &rArr; Lcd_WriteData &rArr; SPIv_WriteData
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;judge
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowErrMessage
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PS_HighSpeedSearch
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PS_GetImage
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PS_GenChar
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gui_DrawFont_GBK16
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[139]"></a>showimage</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, qdtft_demo.o(.text.showimage))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = showimage &rArr; Lcd_SetRegion &rArr; LCD_WriteReg &rArr; Lcd_WriteData_16Bit &rArr; Lcd_WriteData &rArr; SPIv_WriteData
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_WriteData_16Bit
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_SetRegion
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QDTFT_Test_Demo
</UL>

<P><STRONG><a name="[ca]"></a>__aeabi_d2f</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, d2f.o(x$fpl$d2f))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SetFLASHAccessCyclesForFreq
</UL>

<P><STRONG><a name="[16c]"></a>_d2f</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, d2f.o(x$fpl$d2f), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[c9]"></a>__aeabi_dmul</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dmul.o(x$fpl$dmul))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SetFLASHAccessCyclesForFreq
</UL>

<P><STRONG><a name="[16f]"></a>_dmul</STRONG> (Thumb, 332 bytes, Stack size 32 bytes, dmul.o(x$fpl$dmul), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[16e]"></a>__fpl_dnaninf</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, dnaninf.o(x$fpl$dnaninf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2f
</UL>

<P><STRONG><a name="[170]"></a>__fpl_dretinf</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dretinf.o(x$fpl$dretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f2d
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
</UL>

<P><STRONG><a name="[c8]"></a>__aeabi_f2d</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, f2d.o(x$fpl$f2d))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_f2d
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SetFLASHAccessCyclesForFreq
</UL>

<P><STRONG><a name="[171]"></a>_f2d</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, f2d.o(x$fpl$f2d), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
</UL>

<P><STRONG><a name="[172]"></a>__fpl_fnaninf</STRONG> (Thumb, 140 bytes, Stack size 8 bytes, fnaninf.o(x$fpl$fnaninf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f2d
</UL>

<P><STRONG><a name="[91]"></a>_fp_init</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, fpinit.o(x$fpl$fpinit))
<BR><BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_fp_1
</UL>

<P><STRONG><a name="[19c]"></a>__fplib_config_fpu_vfp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[19d]"></a>__fplib_config_pureend_doubles</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[16d]"></a>__fpl_fretinf</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fretinf.o(x$fpl$fretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2f
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[a6]"></a>POWER_DisablePD</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, clock_config.o(.text.POWER_DisablePD))
<BR><BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_BootClockFROHF96M
</UL>

<P><STRONG><a name="[b0]"></a>CLOCK_EnableClock</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, pin_mux.o(.text.CLOCK_EnableClock))
<BR><BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_InitPins
</UL>

<P><STRONG><a name="[b1]"></a>IOCON_PinMuxSet</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, pin_mux.o(.text.IOCON_PinMuxSet))
<BR><BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_InitPins
</UL>

<P><STRONG><a name="[158]"></a>CLOCK_EnableClock</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, main.o(.text.CLOCK_EnableClock))
<BR><BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_IO_INIT
</UL>

<P><STRONG><a name="[15f]"></a>CTIMER_ClearStatusFlags</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, main.o(.text.CTIMER_ClearStatusFlags))
<BR><BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctimer_match0_callback
</UL>

<P><STRONG><a name="[ea]"></a>CTIMER_StartTimer</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, main.o(.text.CTIMER_StartTimer))
<BR><BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCOMM0_IRQHandler
</UL>

<P><STRONG><a name="[15e]"></a>CTIMER_StopTimer</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, main.o(.text.CTIMER_StopTimer))
<BR><BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctimer_match0_callback
</UL>

<P><STRONG><a name="[e5]"></a>EnableIRQ</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, main.o(.text.EnableIRQ))
<BR><BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[165]"></a>GPIO_PinRead</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, main.o(.text.GPIO_PinRead))
<BR><BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_event
</UL>

<P><STRONG><a name="[159]"></a>IOCON_PinMuxSet</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, main.o(.text.IOCON_PinMuxSet))
<BR><BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_IO_INIT
</UL>

<P><STRONG><a name="[167]"></a>USART_EnableInterrupts</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, main.o(.text.USART_EnableInterrupts))
<BR><BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e8]"></a>USART_GetStatusFlags</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, main.o(.text.USART_GetStatusFlags))
<BR><BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCOMM0_IRQHandler
</UL>

<P><STRONG><a name="[e9]"></a>USART_ReadByte</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, main.o(.text.USART_ReadByte))
<BR><BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCOMM0_IRQHandler
</UL>

<P><STRONG><a name="[e6]"></a>__NVIC_EnableIRQ</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, main.o(.text.__NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableIRQ
</UL>

<P><STRONG><a name="[163]"></a>__NVIC_SetPriority</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, main.o(.text.__NVIC_SetPriority))
<BR><BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_init
</UL>

<P><STRONG><a name="[cb]"></a>POWER_DisablePD</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fsl_clock.o(.text.POWER_DisablePD))
<BR><BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SetupFROClocking
</UL>

<P><STRONG><a name="[d3]"></a>CLOCK_EnableClock</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, fsl_ctimer.o(.text.CLOCK_EnableClock))
<BR><BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTIMER_Init
</UL>

<P><STRONG><a name="[ce]"></a>CTIMER_ClearStatusFlags</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fsl_ctimer.o(.text.CTIMER_ClearStatusFlags))
<BR><BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTIMER_SetupMatch
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTIMER_GenericIRQHandler
</UL>

<P><STRONG><a name="[d1]"></a>CTIMER_GetInstance</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, fsl_ctimer.o(.text.CTIMER_GetInstance))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = CTIMER_GetInstance &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTIMER_SetupMatch
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTIMER_RegisterCallBack
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTIMER_Init
</UL>

<P><STRONG><a name="[cd]"></a>CTIMER_GetStatusFlags</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fsl_ctimer.o(.text.CTIMER_GetStatusFlags))
<BR><BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTIMER_GenericIRQHandler
</UL>

<P><STRONG><a name="[d7]"></a>EnableIRQ</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, fsl_ctimer.o(.text.EnableIRQ))
<BR><BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTIMER_SetupMatch
</UL>

<P><STRONG><a name="[e7]"></a>__NVIC_EnableIRQ</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, fsl_ctimer.o(.text.__NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableIRQ
</UL>

<P><STRONG><a name="[d9]"></a>DMA_GetInstance</STRONG> (Thumb, 84 bytes, Stack size 0 bytes, fsl_dma.o(.text.DMA_GetInstance))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = DMA_GetInstance &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetVirtualStartChannel
</UL>

<P><STRONG><a name="[da]"></a>DMA_GetVirtualStartChannel</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, fsl_dma.o(.text.DMA_GetVirtualStartChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = DMA_GetVirtualStartChannel &rArr; DMA_GetInstance &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetInstance
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_IRQHandle
</UL>

<P><STRONG><a name="[ef]"></a>CLOCK_EnableClock</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, fsl_flexcomm.o(.text.CLOCK_EnableClock))
<BR><BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCOMM_Init
</UL>

<P><STRONG><a name="[f1]"></a>FLEXCOMM_PeripheralIsPresent</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, fsl_flexcomm.o(.text.FLEXCOMM_PeripheralIsPresent))
<BR><BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCOMM_SetPeriph
</UL>

<P><STRONG><a name="[f0]"></a>FLEXCOMM_SetPeriph</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, fsl_flexcomm.o(.text.FLEXCOMM_SetPeriph))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FLEXCOMM_SetPeriph
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCOMM_PeripheralIsPresent
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCOMM_Init
</UL>

<P><STRONG><a name="[f5]"></a>CLOCK_EnableClock</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, fsl_gpio.o(.text.CLOCK_EnableClock))
<BR><BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PortInit
</UL>

<P><STRONG><a name="[148]"></a>SDIF_ClearInternalDMAStatus</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, fsl_sdif.o(.text.SDIF_ClearInternalDMAStatus))
<BR><BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIF_TransferHandleIRQ
</UL>

<P><STRONG><a name="[147]"></a>SDIF_ClearInterruptStatus</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fsl_sdif.o(.text.SDIF_ClearInterruptStatus))
<BR><BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIF_TransferHandleIRQ
</UL>

<P><STRONG><a name="[13c]"></a>SDIF_DetectCardInsert</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fsl_sdif.o(.text.SDIF_DetectCardInsert))
<BR><BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIF_TransferHandleCardDetect
</UL>

<P><STRONG><a name="[144]"></a>SDIF_GetEnabledDMAInterruptStatus</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, fsl_sdif.o(.text.SDIF_GetEnabledDMAInterruptStatus))
<BR><BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIF_TransferHandleIRQ
</UL>

<P><STRONG><a name="[143]"></a>SDIF_GetEnabledInterruptStatus</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fsl_sdif.o(.text.SDIF_GetEnabledInterruptStatus))
<BR><BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIF_TransferHandleIRQ
</UL>

<P><STRONG><a name="[13e]"></a>SDIF_ReadCommandResponse</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, fsl_sdif.o(.text.SDIF_ReadCommandResponse))
<BR><BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIF_TransferHandleCommand
</UL>

<P><STRONG><a name="[140]"></a>SDIF_ReadDataPort</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, fsl_sdif.o(.text.SDIF_ReadDataPort))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SDIF_ReadDataPort
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIF_TransferHandleData
</UL>

<P><STRONG><a name="[13b]"></a>SDIF_TransferHandleCardDetect</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, fsl_sdif.o(.text.SDIF_TransferHandleCardDetect))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SDIF_TransferHandleCardDetect
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIF_DetectCardInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIF_TransferHandleIRQ
</UL>

<P><STRONG><a name="[13d]"></a>SDIF_TransferHandleCommand</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, fsl_sdif.o(.text.SDIF_TransferHandleCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = SDIF_TransferHandleCommand &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIF_ReadCommandResponse
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIF_TransferHandleIRQ
</UL>

<P><STRONG><a name="[146]"></a>SDIF_TransferHandleDMA</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, fsl_sdif.o(.text.SDIF_TransferHandleDMA))
<BR><BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIF_TransferHandleIRQ
</UL>

<P><STRONG><a name="[13f]"></a>SDIF_TransferHandleData</STRONG> (Thumb, 192 bytes, Stack size 16 bytes, fsl_sdif.o(.text.SDIF_TransferHandleData))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = SDIF_TransferHandleData &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIF_WriteDataPort
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIF_ReadDataPort
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIF_TransferHandleIRQ
</UL>

<P><STRONG><a name="[142]"></a>SDIF_TransferHandleIRQ</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, fsl_sdif.o(.text.SDIF_TransferHandleIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = SDIF_TransferHandleIRQ &rArr; SDIF_TransferHandleData &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIF_TransferHandleSDIOInterrupt
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIF_TransferHandleData
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIF_TransferHandleDMA
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIF_TransferHandleCommand
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIF_TransferHandleCardDetect
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIF_GetEnabledInterruptStatus
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIF_GetEnabledDMAInterruptStatus
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIF_ClearInterruptStatus
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIF_ClearInternalDMAStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_DriverIRQHandler
</UL>

<P><STRONG><a name="[145]"></a>SDIF_TransferHandleSDIOInterrupt</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, fsl_sdif.o(.text.SDIF_TransferHandleSDIOInterrupt))
<BR><BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIF_TransferHandleIRQ
</UL>

<P><STRONG><a name="[141]"></a>SDIF_WriteDataPort</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, fsl_sdif.o(.text.SDIF_WriteDataPort))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SDIF_WriteDataPort
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIF_TransferHandleData
</UL>

<P><STRONG><a name="[15b]"></a>USART_EnableContinuousSCLK</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fsl_usart.o(.text.USART_EnableContinuousSCLK))
<BR><BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
</UL>

<P><STRONG><a name="[115]"></a>HAL_UartGetStatus</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, usart_adapter.o(.text.HAL_UartGetStatus))
<BR><BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UartInit
</UL>

<P><STRONG><a name="[155]"></a>ConvertRadixNumToString</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, fsl_str.o(.text.ConvertRadixNumToString))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ConvertRadixNumToString
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StrFormatPrintf
</UL>

<P><STRONG><a name="[87]"></a>DbgConsole_PrintCallback</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, fsl_debug_console.o(.text.DbgConsole_PrintCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = DbgConsole_PrintCallback &rArr; DbgConsole_SendDataReliable &rArr;  __aeabi_assert (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_SendDataReliable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fsl_debug_console.o(.text.DbgConsole_Printf)
</UL>
<P><STRONG><a name="[152]"></a>SerialManager_StartWriting</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, serial_manager.o(.text.SerialManager_StartWriting))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SerialManager_StartWriting &rArr; Serial_UartWrite &rArr;  __aeabi_assert (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serial_UartWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialManager_Write
</UL>

<P><STRONG><a name="[154]"></a>SerialManager_Write</STRONG> (Thumb, 122 bytes, Stack size 0 bytes, serial_manager.o(.text.SerialManager_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + In Cycle
<LI>Call Chain = SerialManager_Write &rArr;  __aeabi_assert (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialManager_StartWriting
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialManager_WriteBlocking
</UL>

<P><STRONG><a name="[11e]"></a>GPIO_PortClear</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lcd_driver.o(.text.GPIO_PortClear))
<BR><BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Clear
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIv_WriteData
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_WriteIndex
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_WriteData
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Reset
</UL>

<P><STRONG><a name="[11f]"></a>GPIO_PortSet</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lcd_driver.o(.text.GPIO_PortSet))
<BR><BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Clear
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIv_WriteData
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_WriteIndex
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_WriteData
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Reset
</UL>

<P><STRONG><a name="[118]"></a>JudgeStr</STRONG> (Thumb, 128 bytes, Stack size 32 bytes, as608.o(.text.JudgeStr))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = JudgeStr &rArr; strstr
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PS_HighSpeedSearch
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PS_GetImage
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PS_GenChar
</UL>

<P><STRONG><a name="[124]"></a>MYUSART_SendData</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, as608.o(.text.MYUSART_SendData))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MYUSART_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_WriteByte
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetStatusFlags
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PS_HighSpeedSearch
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PS_HandShake
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PS_GenChar
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sendcmd
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendLength
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendHead
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendFlag
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCheck
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendAddr
</UL>

<P><STRONG><a name="[12e]"></a>SendAddr</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, as608.o(.text.SendAddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SendAddr &rArr; MYUSART_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MYUSART_SendData
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PS_HighSpeedSearch
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PS_HandShake
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PS_GetImage
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PS_GenChar
</UL>

<P><STRONG><a name="[132]"></a>SendCheck</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, as608.o(.text.SendCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SendCheck &rArr; MYUSART_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MYUSART_SendData
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PS_HighSpeedSearch
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PS_GetImage
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PS_GenChar
</UL>

<P><STRONG><a name="[12f]"></a>SendFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, as608.o(.text.SendFlag))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SendFlag &rArr; MYUSART_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MYUSART_SendData
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PS_HighSpeedSearch
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PS_GetImage
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PS_GenChar
</UL>

<P><STRONG><a name="[12d]"></a>SendHead</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, as608.o(.text.SendHead))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SendHead &rArr; MYUSART_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MYUSART_SendData
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PS_HighSpeedSearch
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PS_HandShake
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PS_GetImage
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PS_GenChar
</UL>

<P><STRONG><a name="[130]"></a>SendLength</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, as608.o(.text.SendLength))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SendLength &rArr; MYUSART_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MYUSART_SendData
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PS_HighSpeedSearch
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PS_GetImage
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PS_GenChar
</UL>

<P><STRONG><a name="[131]"></a>Sendcmd</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, as608.o(.text.Sendcmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Sendcmd &rArr; MYUSART_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MYUSART_SendData
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PS_HighSpeedSearch
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PS_GetImage
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PS_GenChar
</UL>

<P><STRONG><a name="[126]"></a>USART_GetStatusFlags</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, as608.o(.text.USART_GetStatusFlags))
<BR><BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MYUSART_SendData
</UL>

<P><STRONG><a name="[125]"></a>USART_WriteByte</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, as608.o(.text.USART_WriteByte))
<BR><BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MYUSART_SendData
</UL>

<P><STRONG><a name="[fc]"></a>GPIO_PinRead</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, paj7620u2_iic.o(.text.GPIO_PinRead))
<BR><BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GS_IIC_Wait_Ack
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GS_IIC_Read_Byte
</UL>

<P><STRONG><a name="[f7]"></a>GPIO_PinWrite</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, paj7620u2_iic.o(.text.GPIO_PinWrite))
<BR><BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GS_IIC_Wait_Ack
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GS_IIC_Stop
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GS_IIC_Start
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GS_IIC_Send_Byte
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GS_IIC_Read_Byte
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GS_IIC_NAck
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GS_IIC_Ack
</UL>

<P><STRONG><a name="[f6]"></a>GS_IIC_Ack</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, paj7620u2_iic.o(.text.GS_IIC_Ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GS_IIC_Ack
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOCON_PinMuxSet
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GS_IIC_Read_Byte
</UL>

<P><STRONG><a name="[fa]"></a>GS_IIC_NAck</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, paj7620u2_iic.o(.text.GS_IIC_NAck))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GS_IIC_NAck
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOCON_PinMuxSet
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GS_IIC_Read_Byte
</UL>

<P><STRONG><a name="[fb]"></a>GS_IIC_Read_Byte</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, paj7620u2_iic.o(.text.GS_IIC_Read_Byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GS_IIC_Read_Byte &rArr; GS_IIC_NAck
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOCON_PinMuxSet
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GS_IIC_NAck
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GS_IIC_Ack
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinWrite
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinRead
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GS_Read_nByte
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GS_Read_Byte
</UL>

<P><STRONG><a name="[fd]"></a>GS_IIC_Send_Byte</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, paj7620u2_iic.o(.text.GS_IIC_Send_Byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GS_IIC_Send_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOCON_PinMuxSet
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GS_Write_Byte
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GS_WakeUp
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GS_Read_nByte
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GS_Read_Byte
</UL>

<P><STRONG><a name="[fe]"></a>GS_IIC_Start</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, paj7620u2_iic.o(.text.GS_IIC_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GS_IIC_Start
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOCON_PinMuxSet
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GS_Write_Byte
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GS_WakeUp
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GS_Read_nByte
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GS_Read_Byte
</UL>

<P><STRONG><a name="[ff]"></a>GS_IIC_Stop</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, paj7620u2_iic.o(.text.GS_IIC_Stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GS_IIC_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOCON_PinMuxSet
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GS_IIC_Wait_Ack
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GS_Write_Byte
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GS_WakeUp
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GS_Read_nByte
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GS_Read_Byte
</UL>

<P><STRONG><a name="[100]"></a>GS_IIC_Wait_Ack</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, paj7620u2_iic.o(.text.GS_IIC_Wait_Ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GS_IIC_Wait_Ack &rArr; GS_IIC_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOCON_PinMuxSet
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GS_IIC_Stop
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinWrite
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinRead
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GS_Write_Byte
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GS_Read_nByte
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GS_Read_Byte
</UL>

<P><STRONG><a name="[f8]"></a>IOCON_PinMuxSet</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, paj7620u2_iic.o(.text.IOCON_PinMuxSet))
<BR><BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GS_IIC_Wait_Ack
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GS_IIC_Stop
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GS_IIC_Start
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GS_IIC_Send_Byte
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GS_IIC_Read_Byte
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GS_IIC_NAck
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GS_IIC_Ack
</UL>

<P><STRONG><a name="[161]"></a>CTIMER_ClearStatusFlags</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, sim800a.o(.text.CTIMER_ClearStatusFlags))
<BR><BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctimer_match1_callback
</UL>

<P><STRONG><a name="[160]"></a>GPIO_PortToggle</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, sim800a.o(.text.GPIO_PortToggle))
<BR><BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctimer_match1_callback
</UL>

<P><STRONG><a name="[eb]"></a>USART_GetStatusFlags</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, sim800a.o(.text.USART_GetStatusFlags))
<BR><BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_SendString
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Pdu_Sms
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Second_AT_Command
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCOMM2_IRQHandler
</UL>

<P><STRONG><a name="[ec]"></a>USART_ReadByte</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, sim800a.o(.text.USART_ReadByte))
<BR><BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCOMM2_IRQHandler
</UL>

<P><STRONG><a name="[14b]"></a>USART_WriteByte</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, sim800a.o(.text.USART_WriteByte))
<BR><BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_SendString
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Pdu_Sms
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Second_AT_Command
</UL>

<P><STRONG><a name="[86]"></a>_printf_input_char</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_char_common.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_common.o(.text)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
